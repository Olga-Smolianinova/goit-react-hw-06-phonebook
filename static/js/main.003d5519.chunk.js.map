{"version":3,"sources":["components/ContactsForm/ContactsForm.module.css","components/ContactList/ContactList.module.css","redux/phonebook-actions.js","redux/phonebook-reducer.js","redux/store.js","redux/phonebook-operations.js","redux/phonebook-selectors.js","components/ContactsForm/ContactsForm.js","components/Filter/Filter.js","components/ContactList/ContactList.js","App.js","index.js"],"names":["module","exports","fetchContactsRequest","createAction","fetchContactsSuccess","fetchContactsError","addContactRequest","addContactSuccess","addContactError","deleteContactRequest","deleteContactSuccess","deleteContactError","changeFilter","items","createReducer","actions","_","payload","state","filter","contact","id","loading","combineReducers","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","logger","store","configureStore","reducer","contacts","phonebookReducer","devTools","process","axios","defaults","baseURL","dispatch","get","then","data","catch","error","name","number","post","contactId","delete","getAllContacts","getFilter","getLoading","getFilteredContacts","createSelector","normalizedFilter","toLowerCase","includes","ContactsForm","handleChange","event","currentTarget","value","setState","handleSubmit","preventDefault","props","onSubmit","some","elm","alert","this","className","s","form","inputName","type","pattern","title","required","onChange","formBtn","Component","connect","contactsSelectors","contactsOperations","target","onDeleteContact","ContactsList","map","ContactsItem","onClick","App","fetchContacts","isLoadingContacts","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.003d5519.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"ContactsForm_form__1hR6e\",\"inputName\":\"ContactsForm_inputName__qxLq0\",\"formBtn\":\"ContactsForm_formBtn__3P54c\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"ContactsList\":\"ContactList_ContactsList__3kiyi\",\"ContactsItem\":\"ContactList_ContactsItem__379eS\"};","import { createAction } from '@reduxjs/toolkit';\r\n\r\n// т.к. при http-запросе обрабатывается логика при старте, успешном получении данных и в случае ошибки - создаем отдельный файл для таких операций (phonebook-operation.js). А в этом файле прописываем  actions для этих случаев\r\n\r\n//1- для отрисовки всей базы при загрузке приложения\r\nconst fetchContactsRequest = createAction('phonebook/fetchContactsRequest'); //при старте\r\nconst fetchContactsSuccess = createAction('phonebook/fetchContactsSuccess'); // при успешном получении данных\r\nconst fetchContactsError = createAction('phonebook/fetchContactsError'); // в случае ошибки\r\n\r\n// 2- addContact\r\nconst addContactRequest = createAction('phonebook/addContactRequest'); //при старте\r\nconst addContactSuccess = createAction('phonebook/addContactSuccess'); // при успешном получении данных\r\nconst addContactError = createAction('phonebook/addContactError'); // в случае ошибки\r\n\r\n// 3-deleteContact\r\nconst deleteContactRequest = createAction('phonebook/deleteContactRequest'); //при старте\r\nconst deleteContactSuccess = createAction('phonebook/deleteContactSuccess'); // при успешном получении данных\r\nconst deleteContactError = createAction('phonebook/deleteContactError'); // в случае ошибки\r\n\r\n// const deleteContact = createAction('phonebook/delete');\r\n\r\nconst changeFilter = createAction('phonebook/changeFilter');\r\n\r\n// eslint-disable-next-line import/no-anonymous-default-export\r\nexport default {\r\n  // для get\r\n  fetchContactsRequest,\r\n  fetchContactsSuccess,\r\n  fetchContactsError,\r\n\r\n  // addContact,\r\n  addContactRequest,\r\n  addContactSuccess,\r\n  addContactError,\r\n\r\n  // deleteContact,\r\n  deleteContactRequest,\r\n  deleteContactSuccess,\r\n  deleteContactError,\r\n\r\n  changeFilter,\r\n};\r\n","import { createReducer } from '@reduxjs/toolkit'; //для создания редьюсера и рефакторинга кода с помощью функции из toolkit\r\n\r\nimport { combineReducers } from 'redux'; //для композиции редьюсеров, то есть совмещать много в один\r\n\r\n//Data\r\nimport actions from './phonebook-actions'; //actions\r\n\r\n//1- редьюсер для contacts with Toolkit. В createReducer() - 1 параметр - это начальное значение state; 2 - это объект кейсов, где каждый ключ это тип действия, а значение - это редюсер для этого типа\r\nconst items = createReducer([], {\r\n  [actions.fetchContactsSuccess]: (_, { payload }) => payload, //чтобы при первой загрузке страницы отрисовывались все contacts из локального бекенда (db.json)\r\n\r\n  [actions.addContactSuccess]: (state, { payload }) => [...state, payload],\r\n\r\n  [actions.deleteContactSuccess]: (state, { payload }) =>\r\n    state.filter(contact => contact.id !== payload), //берем предыдущий contacts и отфильтровываем все элементы, кроме того у которого id совпадает\r\n});\r\n\r\n//2- редьюсер для filter with Toolkit. Когда state не нужен, он объявлен, но не используется, вместо него ставим _\r\nconst filter = createReducer('', {\r\n  [actions.changeFilter]: (_, { payload }) => payload,\r\n});\r\n\r\n// 3 - редьюсер для loading\r\nconst loading = createReducer(false, {\r\n  [actions.fetchContactsRequest]: () => true, //по default - false,загрузка началась, возвращаем => true\r\n\r\n  // при выполненении http-запроса (выполнено или ошибка - загрузка (loading) - останавливается)\r\n  [actions.fetchContactsSuccess]: () => false,\r\n  [actions.fetchContactsError]: () => false,\r\n\r\n  // повторяем логику при addContact\r\n  [actions.addContactRequest]: () => true,\r\n\r\n  [actions.addContactSuccess]: () => false,\r\n  [actions.addContactError]: () => false,\r\n\r\n  // повторяем логику при deleteContact\r\n  [actions.deleteContactRequest]: () => true,\r\n\r\n  [actions.deleteContactSuccess]: () => false,\r\n  [actions.deleteContactError]: () => false,\r\n});\r\n\r\nexport default combineReducers({\r\n  items,\r\n  filter,\r\n  loading, //для отображения состояния загрузки во время http-запроса\r\n});\r\n","import { configureStore, getDefaultMiddleware } from '@reduxjs/toolkit'; //// configureStore - createStore для toolkit; getDefaultMiddleware - список default Middlewares (прослоек).\r\n\r\nimport logger from 'redux-logger'; // прослойка (middleware) при console.log() отображает action (до и после)\r\n\r\nimport {\r\n  // persistStore,\r\n  FLUSH,\r\n  REHYDRATE,\r\n  PAUSE,\r\n  PERSIST,\r\n  PURGE,\r\n  REGISTER,\r\n} from 'redux-persist'; //позволяет записывать какие-либо данные куда-либо, например в local storage. persistStore - для всего store; persistReducer - для одного редьюсера. Все остальное - для проработки ошибок в консоли\r\n\r\n// Reducers\r\nimport phonebookReducer from './phonebook-reducer';\r\n\r\n// создаем новый стек прослоек, который вернет список default Middlewares (прослоек), к которому добавляем еще logger =  прослойка (middleware) при console.log() отображает action (до и после) и добавляем его в reducer\r\n\r\nconst middleware = [\r\n  // getDefaultMiddleware - список default Middlewares (прослоек)\r\n  ...getDefaultMiddleware({\r\n    // объект настроек для проработки ошибок в консоли при проверке целостности state, т.е. указываем что нужно игнорировать, чтобы консоль не светилась красными предупреждениями\r\n    serializableCheck: {\r\n      ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\r\n    },\r\n  }),\r\n  //logger - прослойка (middleware) при console.log() отображает action (до и после). Чтобы ее добавить - устанавливаем и import logger из redux-logger\r\n  logger, //прослойка (middleware) при console.log() отображает action (до и после) и добавляем его в reducer\r\n];\r\n\r\n// Для каждого объекта в глобальном state свой отдельный Reducer. И внизу этого файла есть корневой редьюсер (rootReducer), где ключ - это название компонента со state для него, а значение - редьюсер, который отвечает за него.\r\n\r\n//createStore для toolkit -configureStore. DevTools у него уже под капотом. npm redux-devtools-extension можно удалять\r\nconst store = configureStore({\r\n  // параметры configureStore из документации (reducer, devTools,  middleware и есть еще другие опции)\r\n\r\n  // reducer: {}, под капотом уже использует combineReducers  from 'redux' для композиции редьюсеров, то есть совмещать много в один.\r\n  reducer: {\r\n    // тот reducer, который нужен для persist сперва оборачиваем в persistReducer.\r\n    contacts: phonebookReducer,\r\n  },\r\n  middleware, //возвращает список default Middlewares (прослоек), к которому добавляем еще logger =  прослойка (middleware) при console.log() отображает action (до и после)\r\n\r\n  devTools: process.env.NODE_ENV === 'development', // чтобы DevTools были доступны только в разработке. Переменная окружения из node - process.env. NODE_ENV - описывает какой сейчас режим разработки: production || development\r\n});\r\n\r\n//Создаем  persistor - обертка над store, которая при изменении store будет записывать в local storage и обновлять его.\r\n// const persistor = persistStore(store);\r\n\r\n// И export persistor  и store\r\n// eslint-disable-next-line import/no-anonymous-default-export\r\n// export default { persistor, store };\r\n\r\n// eslint-disable-next-line import/no-anonymous-default-export\r\nexport default store;\r\n","import axios from 'axios'; //для fetch запросов\r\n\r\nimport actions from './phonebook-actions'; //синхронные actions\r\n\r\naxios.defaults.baseURL = `http://localhost:4141`; // baseURL\r\n\r\n// перезаписываем addContact и  так deleteContact, чтобы отправить  http-запрос на локальный бекенд - db.json (http://localhost:4141/сontacts). Передаем параметры, которые возвращают dispatch (dispatch вызовет thunk под капотом)\r\n\r\n//1- FETCH запрос. Для отрисовки contacts  из локального бекенда db.json при загрузке приложения\r\nconst fetchContacts = () => dispatch => {\r\n  // для обработки request при старте. Просто отправляем  type (без payload), который затягиваем из phonebook-actions.js, для того, чтобы можно было поставить флажок загрузки\r\n  dispatch(actions.fetchContactsRequest());\r\n\r\n  axios\r\n    .get('/contacts')\r\n    .then(({ data }) => dispatch(actions.fetchContactsSuccess(data)))\r\n    .catch(error => dispatch(actions.fetchContactsError(error)));\r\n};\r\n\r\n//2- ADD contact. для добавления contact\r\nconst addContact = ({ name, number }) => dispatch => {\r\n  // здесь делаем http-запрос и по результату dispatch выполняются синхронные actions, т.е результаты http-запроса, которые отправляем с данными дальше по цепочке\r\n  const contact = {\r\n    name,\r\n    number,\r\n  };\r\n\r\n  dispatch(actions.addContactRequest());\r\n\r\n  axios\r\n    .post('/contacts', contact)\r\n    // и данные нужно dispatch как объект action. Прописываем dispatch в случаем успеха - это вызываем из actions метод addTodoSuccess, а payload - прокидываем data в   и в случае ошибки(error)\r\n    .then(({ data }) => dispatch(actions.addContactSuccess(data)))\r\n    .catch(error => dispatch(actions.addContactError(error)));\r\n};\r\n\r\n//3- DELETE contact\r\nconst deleteContact = contactId => dispatch => {\r\n  dispatch(actions.deleteContactRequest());\r\n\r\n  axios\r\n    .delete(`/contacts/${contactId}`)\r\n    .then(() => dispatch(actions.deleteContactSuccess(contactId)))\r\n    .catch(error => dispatch(actions.deleteContactError(error)));\r\n};\r\n\r\n// eslint-disable-next-line import/no-anonymous-default-export\r\nexport default { fetchContacts, addContact, deleteContact };\r\n","import { createSelector } from '@reduxjs/toolkit'; ////создание мемоизиронного селектора\r\n\r\n// Рефакторинг из App.js ( mapStateToProps). Принимает весь state. Возвращает только необходимую, малую часть - state.contacts.loading\r\nconst getLoading = state => state.contacts.loading;\r\n\r\n// Рефакторинг из ContactsForm.js ( mapStateToProps).\r\nconst getAllContacts = state => state.contacts.items;\r\n\r\n// Рефакторинг из Filter.js ( mapStateToProps)\r\nconst getFilter = state => state.contacts.filter;\r\n\r\n// Рефакторинг из ContactList.js ( mapStateToProps)\r\n// c применением мемоизиронного селектора. В createSelector 1 аргумент - передаю буквально ссылку на те значения, от которых зависит мемоизация; 2 - перадаю функцию, которая непосредственно будет делать вычисления. В нее аргументами поступает результат вызова функций из аргумента 1\r\nconst getFilteredContacts = createSelector(\r\n  [getAllContacts, getFilter],\r\n  (contacts, filter) => {\r\n    const normalizedFilter = filter.toLowerCase();\r\n    //   Тело этой функции выполнится только в том случае, если изменится или contacts или filter. Т.е. contacts и filter - кешируются. Если из предыдущего вызова contacts или filter не изменились - то return... не произойдет, функция из кеша вернет старый готовый массив, который там хранится как последняя выполненная операция\r\n    return contacts.filter(\r\n      ({ name, number }) =>\r\n        name.toLowerCase().includes(normalizedFilter) ||\r\n        number.toLowerCase().includes(normalizedFilter),\r\n    );\r\n  },\r\n);\r\n// Рефакторинг из ContactList.js ( mapStateToProps)\r\n// ДО\r\n// вычисляемые свойства для фильтрации. Отфильтровываем те contacts, которые includes то, что мы записали в input Фильтр по имени и в ContactList рендерим не все <ContactList\r\n//   contacts={contacts}, а только отфильтрованые, т.е.  contacts={getFilteredContacts}/>\r\n\r\n// const getFilteredContacts = (allContacts, filter) => {\r\n//   // для чистоты кода выведем filter.toLowerCase() в отдельную переменную\r\n//   const normalizedFilter = filter.toLowerCase();\r\n\r\n//   return allContacts.filter(\r\n//     ({ name, number }) =>\r\n//       name.toLowerCase().includes(normalizedFilter) ||\r\n//       number.toLowerCase().includes(normalizedFilter),\r\n//   );\r\n// };\r\n\r\n// eslint-disable-next-line import/no-anonymous-default-export\r\nexport default {\r\n  getLoading,\r\n  getAllContacts,\r\n  getFilter,\r\n  getFilteredContacts,\r\n};\r\n","import React, { Component } from 'react';\r\n\r\nimport PropTypes from 'prop-types';\r\n\r\nimport { connect } from 'react-redux'; //для подключения к глобальному store.js\r\n\r\n// Data\r\nimport contactsOperations from '../../redux/phonebook-operations';\r\n\r\nimport contactsSelectors from '../../redux/phonebook-selectors';\r\n\r\n// Styles\r\nimport s from './ContactsForm.module.css';\r\n\r\nclass ContactsForm extends Component {\r\n  state = {\r\n    name: '',\r\n    number: '',\r\n  };\r\n\r\n  //ввод данных\r\n  handleChange = event => {\r\n    // console.log(event.currentTarget.value);\r\n\r\n    const { name, value } = event.currentTarget;\r\n\r\n    this.setState({\r\n      [name]: value,\r\n    });\r\n  };\r\n\r\n  // для отправки (submit) формы\r\n  handleSubmit = event => {\r\n    event.preventDefault();\r\n    // console.log(this.state);\r\n\r\n    // деструктуризация свойств из глобального state и store\r\n    const { name, number } = this.state;\r\n    const { contacts, onSubmit } = this.props;\r\n\r\n    //  проверка на возможность добавлять контакты, имена которых уже есть в телефонной книге. При попытке выполнить такое действие выводим alert с предупреждением.\r\n    if (contacts.some(elm => elm.name.toLowerCase() === name.toLowerCase())) {\r\n      return alert(`${name} is already in contacts`);\r\n    }\r\n    if (\r\n      contacts.some(elm => elm.number.toLowerCase() === number.toLowerCase())\r\n    ) {\r\n      return alert(`${number} is already in contacts`);\r\n    }\r\n\r\n    //   во время отправки (submit) формы обращаемся к prop onSubmit для передачи данных из  state (name, number) через mapDispatchToProps\r\n    onSubmit(this.state);\r\n\r\n    // вызов reset для очистки  данных формы,\r\n    this.setState({ name: '', number: '' });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <form onSubmit={this.handleSubmit} className={s.form}>\r\n        <label>\r\n          Name\r\n          <input\r\n            className={s.inputName}\r\n            type=\"text\"\r\n            name=\"name\"\r\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n            title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\r\n            required\r\n            value={this.state.name}\r\n            onChange={this.handleChange}\r\n          />\r\n        </label>\r\n\r\n        <label>\r\n          Number\r\n          <input\r\n            type=\"tel\"\r\n            name=\"number\"\r\n            pattern=\"(\\+?( |-|\\.)?\\d{1,2}( |-|\\.)?)?(\\(?\\d{3}\\)?|\\d{3})( |-|\\.)?(\\d{3}( |-|\\.)?\\d{4})\"\r\n            title=\"Номер телефона должен состоять из 11-12 цифр и может содержать цифры, пробелы, тире, пузатые скобки и может начинаться с +\"\r\n            required\r\n            value={this.state.number}\r\n            onChange={this.handleChange}\r\n          />\r\n        </label>\r\n\r\n        <button\r\n          type=\"submit\"\r\n          // disabled={!this.state.name || !this.state.number}\r\n          className={s.formBtn}\r\n        >\r\n          Add Contact\r\n        </button>\r\n      </form>\r\n    );\r\n  }\r\n}\r\n\r\nContactsForm.propTypes = {\r\n  onSubmit: PropTypes.func.isRequired,\r\n};\r\n\r\nconst mapStateToProps = state => ({\r\n  contacts: contactsSelectors.getAllContacts(state),\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  onSubmit: (name, number) =>\r\n    dispatch(contactsOperations.addContact(name, number)),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactsForm);\r\n","import React from 'react';\r\n\r\nimport PropTypes from 'prop-types';\r\n\r\nimport { connect } from 'react-redux'; //для подключения к глобальному store.js\r\n\r\n// Data\r\nimport actions from '../../redux/phonebook-actions';\r\n\r\nimport contactsSelectors from '../../redux/phonebook-selectors';\r\n\r\nconst Filter = ({ value, onChange }) => (\r\n  <label>\r\n    Find contacts by name\r\n    <br />\r\n    <input type=\"text\" value={value} onChange={onChange} />\r\n  </label>\r\n);\r\n\r\nFilter.propTypes = {\r\n  value: PropTypes.string.isRequired,\r\n  onChange: PropTypes.func.isRequired,\r\n};\r\n\r\nconst mapStateToProps = state => ({\r\n  value: contactsSelectors.getFilter(state),\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  onChange: event => dispatch(actions.changeFilter(event.target.value)),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Filter);\r\n","import React from 'react';\r\n\r\nimport PropTypes from 'prop-types';\r\n\r\nimport { connect } from 'react-redux'; //для подключения к глобальному store.js\r\n\r\n// Data\r\nimport contactsOperations from '../../redux/phonebook-operations';\r\n\r\nimport contactsSelectors from '../../redux/phonebook-selectors';\r\n\r\nimport s from './ContactList.module.css';\r\n\r\nconst ContactList = ({ contacts, onDeleteContact }) => {\r\n  return (\r\n    <ul className={s.ContactsList}>\r\n      {contacts.map(({ id, name, number }) => (\r\n        <li key={id} className={s.ContactsItem}>\r\n          {name}: {number}\r\n          <button\r\n            type=\"button\"\r\n            onClick={() => {\r\n              onDeleteContact(id);\r\n            }}\r\n          >\r\n            Delete\r\n          </button>\r\n        </li>\r\n      ))}\r\n    </ul>\r\n  );\r\n};\r\n\r\nContactList.propTypes = {\r\n  contacts: PropTypes.arrayOf(\r\n    PropTypes.shape({\r\n      id: PropTypes.string.isRequired,\r\n      name: PropTypes.string.isRequired,\r\n      number: PropTypes.string.isRequired,\r\n    }),\r\n  ),\r\n  onDeleteContact: PropTypes.func.isRequired,\r\n};\r\n\r\nconst mapStateToProps = state => ({\r\n  // phonebook: имя ключа для state в store.js\r\n  // для отображения по фильтру\r\n  contacts: contactsSelectors.getFilteredContacts(state),\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  onDeleteContact: id => dispatch(contactsOperations.deleteContact(id)),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactList);\r\n","import React, { Component } from 'react';\n\nimport { connect } from 'react-redux';\n\n// Data\nimport contactsOperations from './redux/phonebook-operations';\n\nimport contactsSelectors from './redux/phonebook-selectors';\n\n// Components\nimport ContactsForm from './components/ContactsForm';\n\nimport Filter from './components/Filter';\n\nimport ContactList from './components/ContactList';\n\nclass App extends Component {\n  //  ЖИЗНЕННЫЕ ЦИКЛЫ\n  componentDidMount() {\n    // // при Mount страницы, чтобы из локального бекенда db.json - отрисовывались данные (contacts)\n    this.props.fetchContacts();\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <h1>Phonebook</h1>\n\n        <ContactsForm />\n\n        <h2>Contacts</h2>\n\n        <Filter />\n\n        {/* добавляем отображение Loading при открытии страницы при загрузке данных*/}\n        {this.props.isLoadingContacts && <h2>Loading...</h2>}\n\n        <ContactList />\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = state => ({\n  // isLoadingContacts: state.contacts.loading, //без использования selectors\n\n  isLoadingContacts: contactsSelectors.getLoading(state), //с использованием selectors\n});\n\nconst mapDispatchToProps = dispatch => ({\n  fetchContacts: () => dispatch(contactsOperations.fetchContacts()),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","import React from 'react';\n\nimport ReactDOM from 'react-dom';\n\nimport { Provider } from 'react-redux'; //Для подключение  глобального store  к Redux. Достаем  Provider  (пакет из react-redux) - компонент, который оборачивает все наше приложение, он ставится поверх App, и он через контекст (контекст - это глобальная переменная) может прокидывать в глубину и на любую вложенность дополнительный функционал.\n\n// import { PersistGate } from 'redux-persist/integration/react'; // используется для реализации redux-persist\n\n// Data\n//  Для передачи Provider в props store, с ссылкой на наше хранилище  сначала импортируем этот файл\nimport store from './redux/store';\n// Components\nimport App from './App';\n\n// Styles\nimport './index.css';\nimport 'modern-normalize/modern-normalize.css'; //подключение стилей для normalize\n\nReactDOM.render(\n  <React.StrictMode>\n    {/* Для подключения глобального store к Redux. Достаем Provider (пакет из react-redux) -\n    компонент, который оборачивает все наше приложение, он ставится поверх App,\n    и он через контекст (контекст - это глобальная переменная) может прокидывать\n    в глубину и на любую вложенность дополнительный функционал. Provider в props передаем store (файл которого перед тем import) , с ссылкой на наше хранилище  */}\n    <Provider store={store}>\n      {/*PersistGate используется для реализации redux-persist. В props передаем 1)loading, в который можно указать какой-либо preloader; 2) persistor  - ссылка на сам persistor, который заимпортирован из файла store.js*/}\n      {/* <PersistGate loading={null} persistor={store.persistor}> */}\n      <App />\n      {/* </PersistGate> */}\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}